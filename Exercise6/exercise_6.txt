Q1: What do different columns in the output of EXPLAIN mean? What possible values can those have? What is the meaning of those values?

ANS. The different columns in the output of EXPLAIN are:

1. id: The SELECT identifier.This is the sequential number of the SELECT within the query. The value can be NULL if the row refers to the union result of other rows.

2. select_type: The type of SELECT, which can be any of those shown in the following table.
    a. SIMPLE – Simple query without any unions or subqueries
    b. PRIMARY – Outermost SELECT query
    c. UNION – Second or later SELECT query of a union
    d. DEPENDENT UNION – Second or later SELECT query of a union which is dependent on an outer query
    e. SUBQUERY – First SELECT query in a subquery
    f. DEPENDENT SUBQUERY – First SELECT query in a subquery, dependent on an outer query
    g. DERIVED – SELECT query used as a table in a FROM clause

3. Table – The table to which the row of output refers.

4. Type – The join type.it provides important piece of information, as it indicates how efficiently the server was able to retrieve the requested rows of data.
    a. system - The table has only one row (= system table). This is a special case of the const join type.
    b. const - The table has at most one matching row, which is read at the start of the query
    c. eq_ref - One row is read from this table for each combination of rows from the previous tables. Other than the system and const types
    d. ref - All rows with matching index values are read from this table for each combination of rows from the previous tables
    e. fulltext - The join is performed using a FULLTEXT index.
    f. ref_or_null - This join type is like ref, but with the addition that MySQL does an extra search for rows that contain NULL values
    g. index_merge - This join type indicates that the Index Merge optimization is used.
    h. range - Only rows that are in a given range are retrieved, using an index to select the rows
    i. ALL - A full table scan is done for each combination of rows from the previous tables

5. Possible_keys – The possible_keys column indicates which indexes MySQL can choose to find the rows in this table.

6. Key – The key column indicates the key (index) that MySQL actually decided to use.
  
7. key_len – The key_len column indicates the length of the key that MySQL decided to use. Mostly useful for determining how many parts of a multi-part index the server used.
  
8. ref - The ref column shows which columns or constants are compared to the index named in the key column to select rows from the table

9. rows – The rows column indicates the number of rows MySQL believes it must examine to execute the query.

10.Extra- This column contains additional information about how MySQL resolves the query.
    a. Not exists – MySQL was able to do a LEFT JOIN optimization on the query and does not examine more rows in this table for the previous row combination after it finds one row that matches the LEFT JOIN criteria
    b. Using filesort – MySQL must do an extra pass to find out how to retrieve the rows in sorted order. The sort is done by going through all rows according to the join type and storing the sort key and pointer to the row for all rows that match the WHERE clause
    c. Using index – Server is able to return rows directly from the index instead of doing an additional seek to read the actual rows.
    d. Using temporary – Server will need to create a temporary table to hold results. Often occurs with differing GROUP BY and ORDER BY columns.
    e. Using where – Server is using values in the WHERE clause to limit returned rows.
    f. Distinct – Server is able to perform an optimization where it will stop searching for more rows for the current row combination after it has found the first matching row


Q2: We use EXPLAIN to optimize slow SQL queries used in our application. Lets say we have a comments table in our application that has a foreign key, user_id, referencing to users table. EXPLAINing the query that finds all the comments made by a user gives us following result.

mysql> EXPLAIN SELECT * FROM comments WHERE user_id = 41;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE | ALL | NULL | NULL | NULL | 1002345 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

mysql> SELECT count(id) FROM comments;

+-----------+
| count(id) |
+-----------+
| 1002345 |
+-----------+

2.1 The value under 'rows' column in the output of EXPLAIN query and SELECT query after it are same. What does it mean?

ANS. The rows which are shown in the explain command is the estimate value of the rows which the query optimizer or parser would be examine to execute the query. It is just an estimate and it may or may not be correct all the time. This number has been derived from the table stats and index selection.
     While The count(id) command would start from the beginning to the end counting the rows.

2.2 Is the SELECT query optimal? If no, how do we optimize it?

ANS. No its not optimal.It can be optimized through following steps:
     Using Indexes: There is no indexes so indexing can increase its performance and search will be faster instead of full table scan. 
     Query Performance Optimization: The Query Performance must be seen and analyses using the EXPLAIN keyword. it describe the course of execution of the query and the number of rows that would be needed to execute the query and deliver the result set sucesfully.


Q3. In Rails world, we have someting called polymorphic associations (http://guides.rubyonrails.org/association_basics.html#polymorphic-associations). Lets say in our web application, we can let users comment on photographs and articles. Some of rows in comments table are represented as following:

mysql> SELECT * FROM comments LIMIT 5;

+----+------------------+----------------+---------+
| id | commentable_type | commentable_id | user_id |
+----+------------------+----------------+---------+
| 1 + Article | 1 | 1 |
+----+------------------+----------------+---------+
| 2 + Photo | 1 | 1 |
+----+------------------+----------------+---------+
| 3 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 4 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 5 + Article | 1 | 2 |
+----+------------------+----------------+---------+

When we need to fetch comments of a user on a particular Article or Photo we form a query like:

mysql> EXPLAIN SELECT * FROM comments WHERE commentable_id = 1 AND commentable_type = 'Article' AND user_id = 1;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE | ALL | NULL | NULL | NULL | 1000025 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

It seems that we do not have any index on any of the columns. And whole comments table is scanned to fetch those comments.

3.1 We decide to index columns in comments table to optimize the SELECT query. What column(s) will you index in which order?

ANS. We will index the columns (in order): user_id, commentable_id, commentable_type
     Because user_id will be most selective, then commentable_id and lastly, commentable_type.


Q4.1: EXPLAIN a SELECT query against one of your databases which employs an INNER JOIN between two tables. What does the output look like? What does the values under different columns mean? Do you get only one row in EXPLAIN's output?

ANS. 
mysql> EXPLAIN SELECT DISTINCT sandwiches.location FROM sandwiches INNER JOIN tastes USING (filling) WHERE name = "Jones";
+----+-------------+------------+-------+---------------+---------+---------+-------+------+---------------------------------------------+
| id | select_type | table      | type  | possible_keys | key     | key_len | ref   | rows | Extra                                       |
+----+-------------+------------+-------+---------------+---------+---------+-------+------+---------------------------------------------+
|  1 | SIMPLE      | tastes     | ref   | PRIMARY       | PRIMARY | 22      | const |    1 | Using where; Using index; Using temporary   |
|  1 | SIMPLE      | sandwiches | index | NULL          | PRIMARY | 56      | NULL  |   10 | Using where; Using index; Using join buffer |
+----+-------------+------------+-------+---------------+---------+---------+-------+------+---------------------------------------------+
2 rows in set (0.00 sec)

We get 2 rows in EXPLAIN's output.Both the SELECTs in the JOIN are of SIMPLE type.

Q4.2: Form the same select query in above question using a subquery instead of a JOIN. What does the EXPLAIN output look like now? Which query is better and why?

ANS. 
mysql> EXPLAIN SELECT location FROM sandwiches WHERE filling IN (SELECT filling FROM tastes WHERE name = "Jones");
+----+--------------------+------------+--------+---------------+---------+---------+------------+------+--------------------------+
| id | select_type        | table      | type   | possible_keys | key     | key_len | ref        | rows | Extra                    |
+----+--------------------+------------+--------+---------------+---------+---------+------------+------+--------------------------+
|  1 | PRIMARY            | sandwiches | index  | NULL          | PRIMARY | 56      | NULL       |   10 | Using where; Using index |
|  2 | DEPENDENT SUBQUERY | tastes     | eq_ref | PRIMARY       | PRIMARY | 44      | const,func |    1 | Using where; Using index |
+----+--------------------+------------+--------+---------------+---------+---------+------------+------+--------------------------+
2 rows in set (0.01 sec)

We get 2 rows. Here, we get a PRIMARY and DEPENDENT SUBQUERY for the SELECTs.

The first query (using JOIN) was better as, in the second one, the subquery is first computed and then the results of that query are passed on to the PRIMARY SELECT query.