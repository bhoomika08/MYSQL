mysql> CREATE DATABASE Employee_Commission;
Query OK, 1 row affected (0.10 sec)

mysql> USE Employee_Commission;
Database changed
mysql> CREATE TABLE Departments(id INT(5) AUTO_INCREMENT, name VARCHAR(20) NOT NULL, PRIMARY KEY(id));
Query OK, 0 rows affected (0.32 sec)

mysql> INSERT INTO Departments(name) VALUES('Banking'),('Insurance'),('Services');
Query OK, 3 rows affected (0.08 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM Departments
    -> ;
+----+-----------+
| id | name      |
+----+-----------+
|  1 | Banking   |
|  2 | Insurance |
|  3 | Services  |
+----+-----------+
3 rows in set (0.06 sec)

mysql> CREATE TABLE Employees(id INT(10) AUTO_INCREMENT, name CHAR(20) NOT NULL, salary INT(10), department_id INT(10), PRIMARY KEY(id), FOREIGN KEY(department_id) REFERENCES Departments(id));
Query OK, 0 rows affected (0.40 sec)

mysql> INSERT INTO Employees(name,salary,department_id) VALUES('Chris Gayle',1000000,1),('Michael Clarke',800000,2),('Rahul Dravid',700000,1),('Rickey Pointing',600000,2),('Albie Morkel',650000,2),('Wasim Akram',750000,3);
Query OK, 6 rows affected (0.05 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM Employees
    -> ;
+----+-----------------+---------+---------------+
| id | name            | salary  | department_id |
+----+-----------------+---------+---------------+
|  1 | Chris Gayle     | 1000000 |             1 |
|  2 | Michael Clarke  |  800000 |             2 |
|  3 | Rahul Dravid    |  700000 |             1 |
|  4 | Rickey Pointing |  600000 |             2 |
|  5 | Albie Morkel    |  650000 |             2 |
|  6 | Wasim Akram     |  750000 |             3 |
+----+-----------------+---------+---------------+
6 rows in set (0.00 sec)

mysql> CREATE TABLE Commissions(id INT(10) AUTO_INCREMENT, employee_id INT(10), commission_amount INT(20), PRIMARY KEY(id), FOREIGN KEY(employee_id) REFERENCES Employees(id));
Query OK, 0 rows affected (0.19 sec)

mysql> INSERT INTO Commissions(employee_id, commission_amount)VALUES(1,5000),(2,3000),(3,4000),(1,4000),(2,3000),(4,2000),(5,1000),(6,5000);
Query OK, 8 rows affected (0.07 sec)
Records: 8  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM Commissions;
+----+-------------+-------------------+
| id | employee_id | commission_amount |
+----+-------------+-------------------+
|  1 |           1 |              5000 |
|  2 |           2 |              3000 |
|  3 |           3 |              4000 |
|  4 |           1 |              4000 |
|  5 |           2 |              3000 |
|  6 |           4 |              2000 |
|  7 |           5 |              1000 |
|  8 |           6 |              5000 |
+----+-------------+-------------------+
8 rows in set (0.06 sec)


Creating Index

mysql> CREATE INDEX commission_amount_index ON Commissions(commission_amount);
Query OK, 0 rows affected (0.28 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> CREATE INDEX employee_name_index ON Employees(name);
Query OK, 0 rows affected (0.22 sec)
Records: 0  Duplicates: 0  Warnings: 0

Queries

Q1.Find the employee who gets the highest total commission. 

ANS.
mysql> SELECT e.name, SUM(c.commission_amount) AS total_commission 
FROM commissions AS c INNER JOIN employees AS e 
ON e.id = c.employee_id  
GROUP BY c.employee_id 
ORDER BY c.commission_amount DESC LIMIT 1;
+-------------+------------------+
| name        | total_commission |
+-------------+------------------+
| Chris Gayle |             9000 |
+-------------+------------------+
1 row in set (0.00 sec)

Q2. Find employee with 4th Highest salary from employee table.

ANS.
mysql> SELECT GROUP_CONCAT(name), salary FROM employees GROUP BY salary ORDER BY salary DESC LIMIT 3,1;
+--------------------+--------+
| GROUP_CONCAT(name) | salary |
+--------------------+--------+
| Rahul Dravid       | 700000 |
+--------------------+--------+
1 row in set (0.00 sec)

Q3. Find department that is giving highest commission.

ANS.
mysql> SELECT d.name, SUM(commission_amount) AS total_commission 
FROM departments AS d INNER JOIN commissions AS c INNER JOIN employees AS e 
ON e.id = c.employee_id AND d.id = e.department_id 
GROUP BY e.department_id 
ORDER BY total_commission DESC LIMIT 1;
+---------+------------------+
| name    | total_commission |
+---------+------------------+
| Banking |            13000 |
+---------+------------------+
1 row in set (0.00 sec)
 

Q4. Find employees getting commission more than 3000
    Display Output in following pattern:  
      Chris Gayle, Rahul Dravid  4000

ANS.
mysql> SELECT GROUP_CONCAT(e.name) AS Employees, c.commission_amount FROM employees AS e INNER JOIN commissions AS c ON e.id = c.employee_id GROUP BY c.commission_amount HAVING c.commission_amount > 3000;
+--------------------------+-------------------+
| Employees                | commission_amount |
+--------------------------+-------------------+
| Rahul Dravid,Chris Gayle |              4000 |
| Chris Gayle,Wasim Akram  |              5000 |
+--------------------------+-------------------+
2 rows in set (0.00 sec)





